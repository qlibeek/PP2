GIT HOWTO КОНСПЕКТ

1. **Создание проекта**
   - Git начинает работу с репозиторием. 
   - Команда `git init` создаёт скрытую папку `.git`, где хранится вся история и настройки проекта.
   - С этого момента Git будет отслеживать изменения.

   **Важно:** пока вы не сделаете первый коммит, репозиторий пустой.

---

2. **Первый коммит**
   - Чтобы добавить файл под контроль Git:
     1. Создаём файл, например `hello.html`.
     2. Добавляем его в индекс: `git add hello.html`.
     3. Сохраняем снимок состояния: `git commit -m "Initial commit"`.
   - Теперь этот файл официально зафиксирован в истории проекта.

    *Коммит — это как «сохранение» в игре. Вернуться можно всегда.*

---

3. **Изменение файлов**
   - Если файл меняется, Git это замечает. 
   - Команда `git status` показывает:
     - изменённые, но не добавленные в индекс файлы,
     - проиндексированные файлы, готовые к коммиту.

   **Практика:**
   - Меняем `hello.html`, добавляем тег `<h1>`.
   - Проверяем: `git status` → файл в разделе «изменён, но не добавлен».
   - Добавляем и фиксируем.

---

4. **Проверка состояния**
   - `git status` — одна из самых часто используемых команд.
   - Она показывает, где именно находятся изменения: 
     - в рабочем каталоге (working directory),
     - в индексе (staging area),
     - уже в истории (committed).

   *Помни правило трёх областей: рабочая папка → индекс → история.*

---

5. **Подготовка к коммиту (индексация)**
   - Команда `git add` фиксирует изменения во временную область (staging).
   - Можно добавить:
     - один файл → `git add file.html`,
     - всё сразу → `git add .`.

    Опасность: `git add .` добавит все изменения, включая лишние (например, временные файлы). Лучше проверять перед этим `git status`.

---

6. **Совершение коммита**
   - После индексации делаем коммит:
     ```bash
     git commit -m "Описание изменений"
     ```
   - Сообщение коммита должно быть информативным (например, «Добавлен заголовок HTML» вместо «изменено»).

    Совет: в командах всегда указывай суть изменения — потом легче искать нужное место в истории.

---

7. **История изменений**
   - `git log` показывает все коммиты.
   - Удобные варианты:
     - `git log --oneline` → кратко в одну строку.
     - `git log --author="Name"` → только нужного автора.
     - `git log --since="7 days ago"` → за последние 7 дней.
   - Формат можно настраивать, например:
     ```bash
     git log --pretty=format:"%h %ad | %s [%an]" --date=short
     ```
   Это делает лог удобным для чтения.

---

8. **Изменения, а не файлы**
   - Git хранит не «файлы», а «снимки изменений».
   - Пример:
     - сделали одно изменение в `hello.html`, добавили в индекс;
     - сделали второе изменение, но не добавили;
     - коммит зафиксирует только то, что в индексе.

    *Важно понимать: git commit фиксирует только то, что в staging area.*

---

9. **Путешествие во времени**
   - Можно вернуться к любой версии проекта.
   - Для этого используем хеш коммита (короткий ID):
     ```bash
     git checkout <hash>
     ```
   - Появляется состояние «detached HEAD» — можно смотреть старый код, но если что-то закоммитить, это не попадёт в ветку.

   Чтобы вернуться назад в актуальное состояние:
   ```bash
   git switch main
   ```

---

10. **Теги**
   - Чтобы не запоминать хеши, можно помечать версии проекта:
     ```bash
     git tag v1
     ```
   - Теперь можно обращаться по имени тега:
     ```bash
     git checkout v1
     ```
   - Список всех тегов: `git tag`.

    Теги удобно использовать для релизов (v1.0, v2.0 и т.д.).

---

11. **Отмена локальных изменений (до индексации)**
   - Если файл изменён, но не добавлен в индекс → можно вернуть его к последнему коммиту:
     ```bash
     git restore file.html
     ```
   - Это убирает все несохранённые изменения в рабочей директории.

    Осторожно: восстановление стирает то, что не закоммичено.

---

12. **Отмена проиндексированных изменений (перед коммитом)**
   - Если уже сделали `git add`, но передумали:
     ```bash
     git restore --staged file.html
     ```
   - Это уберёт файл из индекса, но оставит изменения в рабочей директории.
   - Чтобы вернуть и сам файл:
     ```bash
     git restore file.html
     ```

    *Таким образом, есть два шага отмены: сначала из staging, потом из рабочей директории.*

---

ИТОГ ПО ПЕРВЫМ 13 УРОКАМ
=========================
- Git работает не с файлами, а с изменениями.
- Есть три области: рабочая директория, индекс, история.
- Основные команды:
  - `git status` → контроль состояния.
  - `git add` → подготовка к коммиту.
  - `git commit` → фиксация изменений.
  - `git log` → история.
  - `git restore` → откат изменений.
  - `git checkout` / `git switch` → переключение версий/веток.
  - `git tag` → метки версий.
